; This is the OAuth Authorization Server configuration

; name of service
serviceName = "OAuth Authorization Server"
; type of resources you get access too
serviceResources = "Protected Resource"

; the storage backend, currently only PDO is supported
storageBackend = "PdoOAuthStorage"

authenticationMechanism = "DummyResourceOwner"
;authenticationMechanism = "BrowserIDResourceOwner"
;authenticationMechanism = "SspResourceOwner"

; makes it possible for resource owners to deselect some of the 
; scope fields requested by the client
allowResourceOwnerScopeFiltering = FALSE

; the access token expiry time (in seconds)
accessTokenExpiry = 3600

; Logging
[Log]
; any of DEBUG, INFO, WARNING or FATAL
;
; DEBUG (=100) logs DEBUG, INFO, WARNING and FATAL
; INFO (=200) logs INFO WARNING and FATAL
; WARNING (=300) logs WARNING and FATAL
; FATAL (=400) logs FATAL
;
; for production we recommend FATAL as that usually represents a bug in the 
; software or indicates server/DB issues and not a client/user error
logLevel = 300

; file to write log to
logFile = "/PATH/TO/APP/data/logs/oauth2.txt"

; Send mails to the following receipients of all log messages also written to
; to log file
;logMail[] = "fkooman@example.org"
;logMail[] = "foo@example.com"

; Options for the HTTP REST based API for managing the OAuth AS
[Api]
enableApi = FALSE

; make it possible to disable API entitlement enforcement, allowing any 
; authenticated user to manage OAuth client registrations
; NOT RECOMMENDED, ONLY FOR TESTING PURPOSES, THIS CONFIGURATION OPTION WILL BE 
; REMOVED IN THE FUTURE! THIS IS INSECURE! YOU HAVE BEEN WARNED.
disableEntitlementEnforcement = FALSE

[PdoOAuthStorage]
dsn = "sqlite:/PATH/TO/APP/data/oauth2.sqlite";
;dsn = "mysql:host=localhost;dbname=oauth"
;username = "oauth"
;password = "s3cr3t"

; use a persistent DB connection, make sure to ENABLE this for PRODUCTION 
; systems
persistentConnection = FALSE

; Dummy Configuration
[DummyResourceOwner]
resourceOwnerId = "fkooman"
resourceOwnerEntitlement["applications"] = "fkooman"

; BrowserID configuration
[BrowserIDResourceOwner]
browserIDPath = "/var/www/html/php-browserid"
verifierAddress = "https://browserid.org/verify"

resourceOwnerEntitlement["applications"] = "fkooman@example.org"
;resourceOwnerEntitlement["applications"] = "john.doe@example.org"

; simpleSAMLphp configuration
[SspResourceOwner]
sspPath = "/var/simplesamlphp"
authSource = "default-sp"

; by default we use the (persistent) NameID value received from the SAML 
; assertion as the user identifier (RECOMMENDED)
useNameID = TRUE

; you can also use an attribute as a unique identifier for a user instead 
; of the NameID, but set 'useNameID' to FALSE then!
;resourceOwnerIdAttributeName = "uid"
;resourceOwnerIdAttributeName = "urn:mace:dir:attribute-def:uid"

; by default we recommend to use an entitlement SAML attribute to indicate
; who is allowed to access certain restricted API calls
;entitlementAttributeName = "eduPersonEntitlement"
;entitlementAttributeName = "urn:mace:dir:attribute-def:eduPersonEntitlement"
;entitlementValueMapping["applications"] = "urn:vnd:oauth2:applications"

; but you can also "cheat" and determine entitlement based on the "uid" 
; attribute, or any other attribute that matches a certain value...
;entitlementAttributeName = "uid"
;entitlementAttributeName = "urn:mace:dir:attribute-def:uid"
;entitlementValueMapping["applications"] = "fkooman"
;entitlementValueMapping["applications"] = "john.doe"
