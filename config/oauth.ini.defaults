; This is the OAuth Authorization Server configuration

; name of service
serviceName = "OAuth Authorization Server"
; type of resources you get access too
serviceResources = "Protected Resource"

; the storage backend, currently only PDO is supported
storageBackend = "PdoOAuthStorage"

authenticationMechanism = "DummyResourceOwner"
;authenticationMechanism = "BrowserIDResourceOwner"
;authenticationMechanism = "SspResourceOwner"

; makes it possible for resource owners to deselect some of the 
; scope fields requested by the client
allowResourceOwnerScopeFiltering = FALSE

; the access token expiry time (in seconds)
accessTokenExpiry = 3600

; Options for the HTTP REST based API for managing the OAuth AS
[Api]
enableApi = FALSE

; determine whether an entitlement is needed to access the various aspects of 
; the API

; manage OAuth clients (global)
requireEntitlement["applications"] = TRUE
; manage OAuth consent/authorization/approval (per resource owner)
requireEntitlement["authorizations"] = FALSE
; retrieve resource owner information (per resource owner)
requireEntitlement["resource_owner"] = FALSE

[PdoOAuthStorage]
dsn = "sqlite:/PATH/TO/APP/data/oauth2.sqlite";
;dsn = "mysql:host=localhost;dbname=oauth"
;username = "oauth"
;password = "s3cr3t"

; use a persistent DB connection, make sure to ENABLE this for PRODUCTION 
; systems
persistentConnection = FALSE

; Dummy Configuration
[DummyResourceOwner]
resourceOwnerId = "fkooman"

resourceOwnerEntitlement["applications"] = "fkooman"
;resourceOwnerEntitlement["authorizations"] = "fkooman"

; BrowserID configuration
[BrowserIDResourceOwner]
browserIDPath = "/var/www/html/php-browserid"
verifierAddress = "https://browserid.org/verify"

resourceOwnerEntitlement["applications"] = "fkooman@example.org"
;resourceOwnerEntitlement["applications"] = "john.doe@example.org"
;resourceOwnerEntitlement["authorizations"] = "fkooman@example.org"

; simpleSAMLphp configuration
[SspResourceOwner]
sspPath = "/var/simplesamlphp"
authSource = "default-sp"

; by default we use the (persistent) NameID value received from the SAML 
; assertion as the user identifier (RECOMMENDED)
useNameID = TRUE

; by default we recommend to use an entitlement SAML attribute to indicate
; who is allowed to access certain restricted API calls
;entitlementAttributeName = "eduPersonEntitlement"
;entitlementAttributeName = "urn:mace:dir:attribute-def:eduPersonEntitlement"
;entitlementFromAttributeValue["applications"] = "urn:vnd:oauth2:applications"
;entitlementFromAttributeValue["authorizations"] = "urn:vnd:oauth2:authorizations"

; you can also use an attribute to determine the UID, but this is not 
; recommended and should only be used for testing purposes!
;resourceOwnerIdAttributeName = "uid"
;resourceOwnerIdAttributeName = "urn:mace:dir:attribute-def:uid"

; but you can also "cheat" and determine entitlement based on the "uid" 
; attribute, or any other attribute 
;entitlementAttributeName = "uid"
;entitlementFromAttributeValue["applications"] = "fkooman"
;entitlementFromAttributeValue["applications"] = "john.doe"
;entitlementFromAttributeValue["authorizations"] = "fkooman"
;entitlementFromAttributeValue["authorizations"] = "john.doe"
